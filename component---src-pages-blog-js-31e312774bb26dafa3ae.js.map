{"version":3,"sources":["webpack:///./src/pages/blog.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["BlogLink","name","styles","query","BlogPage","_ref","data","console","log","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_components_seo__WEBPACK_IMPORTED_MODULE_4__","title","allMarkdownRemark","totalCount","edges","map","_ref2","node","key","id","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","fields","slug","css","frontmatter","date","excerpt","m","module","exports","require","default","loader","enqueue","React","createContext","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","assign","json","HeaderLink","Header","siteTitle","core_browser_esm","style","background","marginBottom","margin","maxWidth","padding","display","gatsby_browser_entry","color","textDecoration","paddingLeft","href","defaultProps","Layout","children","_856328897","react_default","a","Fragment","header","site","siteMetadata","paddingTop","marginTop","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_1__","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","author","concat"],"mappings":"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","file":"component---src-pages-blog-js-31e312774bb26dafa3ae.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\n//import styled from \"@emotion/styled\"\nimport { css } from \"@emotion/core\"\n\nconst BlogLink = css`\n  color: black;\n  text-decoration: none;\n  `\n\nconst BlogPage = ({ data }) => {\n  console.log(data)\n  return (\n  <Layout>\n    <SEO title=\"Blog\" />\n    <div>\n        <h4>{data.allMarkdownRemark.totalCount} Posts</h4>\n        {data.allMarkdownRemark.edges.map(({ node }) => (\n          <div key={node.id}>\n            <Link\n              to={node.fields.slug}\n              css={BlogLink}\n            >\n              <h3>\n                {node.frontmatter.title}{\" \"}\n                <span\n                >\n                  â€” {node.frontmatter.date}\n                </span>\n              </h3>\n            <p>{node.excerpt}</p>\n            </Link>\n          </div>\n        ))}\n      </div>\n  </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n\nexport default BlogPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nimport { css } from \"@emotion/core\"\n\nconst HeaderLink = css`\n  text-decoration: none;\n  color: black;\n  padding: 10px;\n  margin-left: 20px;\n  &:hover {\n    background-color: #6BC0E8;\n    color: white;\n  }\n  `\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `white`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n        display: 'flex',\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `#6BC0E8`,\n            textDecoration: `none`,\n          }}\n        >\n          darragh \n        </Link>\n        <Link\n          to=\"/\"\n          style={{\n            color: `black`,\n            textDecoration: `none`,\n            paddingLeft: 10\n          }}\n        >\n           burke \n        </Link>\n      </h1>\n      <Link\n        to=\"/about\"\n        css={HeaderLink}>      \n        <h3>about</h3>\n      </Link>\n      <a\n        href=\"https://drive.google.com/open?id=1dUgo6eloksdKyFjCc85N1WwpJmnR-z3X\"\n        css={HeaderLink}>\n        <h3>resume</h3>\n      </a>\n      <Link\n          to=\"/blog\"\n          css={HeaderLink}>\n        <h3>blog</h3>\n      </Link>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0px 1.0875rem 1.45rem`,\n          paddingTop: 0,\n        }}\n      >\n        <main>{children}</main>\n        <footer style={{marginTop: '3rem'}}>\n          Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">\n            GatsbyJS\n          </a>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}